/**
 * @shortdesc RFID
 * @desc Testcases that test the RFID sensor
 */
module RFIDModule {
	import from PhyIOAUX all;
	import from TTlibrary_UnitTest all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;
	
	/**
	 * @shortdesc Correct RFID
	 * @desc Receives detected RFID which ought to be the correct one.
	 * @verdict pass if RFID is currect else fail
	 * @stage 1:Wait for RFID
	 */
	testcase CorrectRFIDTestcase() runs on me system System {
		var VerdictDescription verdict := internalRFIDTestcase(OWNER_RFID, true);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc False RFID
	 * @desc Receives detected RFID which ought to be a false one.
	 * @verdict pass if RFID is detected and does NOT match. fail if there is NO RFID or the correct one.
	 * @stage 1:Wait for RFID
	 */
	testcase FalseRFIDTestcase() runs on me system System {
		var VerdictDescription verdict := internalRFIDTestcase(OWNER_RFID, false);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @desc tests whether the code on the RFID chip is valid
	 * @param rfid, the RFID code that is to be verified
	 * @param expectCorrectRFID true if match for correct RFID, false if a false one is expected
	 */
	function internalRFIDTestcase(RFID correctRFID, boolean expectCorrectRFID)
	runs on me system System return VerdictDescription {
		var boolean hasRFID := false;
		var boolean isRFIDCorrect := false;
		var RFID tmp;
		
		setup();
		
		rfidSensor.send(ReadRFIDStart:{});
		t.start(TIME_RFID);
		
		setStage(1, TIME_RFID);
		
		alt{
			[]rfidSensor.receive(RFID: correctRFID) -> value tmp{
				log("Received correct RFID: {" &
					int2str(tmp.id1) & ", " &
					int2str(tmp.id2) & ", " &
					int2str(tmp.id3) & ", " &
					int2str(tmp.id4) & "}");
    				
				hasRFID := true;
				isRFIDCorrect := true;
			}
			[]rfidSensor.receive(RFID: ?) -> value tmp {
				log("Received false RFID: {" &
					int2str(tmp.id1) & ", " &
					int2str(tmp.id2) & ", " &
					int2str(tmp.id3) & ", " &
					int2str(tmp.id4) & "}");
									
				hasRFID := true;
				isRFIDCorrect := false;
			}
			[] sutConfig.receive {
				// config port sends some data in some of the Arduino files
				// TODO make sure that it doesn't
				repeat;
			}
			[]t.timeout {
				hasRFID := false;
			}
			//[] any port.receive {
			//	hasRFID := false;
			//}
		}
		
		rfidSensor.send(ReadRFIDStop:{});
		
		tearDown();
		
		if(not hasRFID) {
			return verdictInconc("Received no RFID");
		} else if(isRFIDCorrect == expectCorrectRFID) {
			return verdictPass("");
		} else {
			return verdictFail("");
		}
	}
	
	function executeRFIDTestcases() {
		execute(CorrectRFIDTestcase());
		execute(FalseRFIDTestcase());
	}
}
