module TheftDetection {
	import from PhyIOAUX all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;
	
	/**
	 * @shortdesc Theft Detection (correct RFID, door opens)
	 * @desc Theft detection with the correct RFID and door opening. Expect no alarm.
	 * @verdict pass if RFID is correct, door opens and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidOk_DoorOpens() runs on me system System {
	// TODO
	}
	
	/**
	 * @shortdesc Theft Detection (correct RFID, door remains closed)
	 * @desc Theft detection with the correct RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is correct, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidOk_DoorClosed() runs on me system System {
	// TODO
	}
	
	/**
	 * @shortdesc Theft Detection (false RFID, door opens)
	 * @desc Theft detection with a false RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is false, door opens and alarm goes off. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidFalse_DoorOpens() runs on me system System {
	// TODO
	}
	
		
	/**
	 * @shortdesc Theft Detection (flase RFID, door remains closed)
	 * @desc Theft detection with the false RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is false, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidFalse_DoorClosed() runs on me system System {
	// TODO
	}
		
	/**
	 * @shortdesc Theft Detection (no RFID, door opens)
	 * @desc Theft detection with no RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is missing, door opens and alarm goes off. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidMissing_DoorOpens() runs on me system System {
	// TODO
	}
	
	/**
	 * @shortdesc Theft Detection (no RFID, door remains closed)
	 * @desc Theft detection with the no RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is missing, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 */
	testcase TheftDetectionTestcase_RfidMissing_DoorClosed() runs on me system System {
	// TODO
	}
	
	function internalTheftDetection(verdicttype expectRFID, boolean expectDoor, boolean expectEmergency)
	runs on me system System return verdicttype {
		var verdicttype result := none;
		timer requestELTimer;
		
		const float EL_CHECK_TIME := 0.5;
		const float WAIT_FOR_EL_TIME := 3.0;
		
		var boolean hasDoor := false;
		var boolean hasRFID := false;
		var boolean isRFIDCorrect := false;
		var boolean isAlarmOn := false;
		
		setup();
		
		doorSensor.send(ReadDoorStart: {});
		lightSensor.send(ReadLightSwitchStart: MIN_SWITCH_BRIGHTNESS_DIFFERENCE);
		rfidSensor.send(RFID: OWNER_RFID);
		rfidSensor.send(ReadRFIDStart: {});
		
		t.start(30.0);
		requestELTimer.start(EL_CHECK_TIME);
		
		while(result == none) {
			alt {
				[]doorSensor.receive(DoorState: true) {
					hasDoor := true;
					t.start(WAIT_FOR_EL_TIME);
				}
				[]doorSensor.receive(DoorState: ?) {
					// door should never send anything but 'true'
					result := fail;
				}
				[]requestELTimer.timeout {
					lightSensor.send(READ_FREQUENCY);
					requestELTimer.start(EL_CHECK_TIME);
				}
				[]lightSensor.receive(Frequency: 0.0) {
				// there is nothing to see here, please continue
				}
				[]lightSensor.receive(Frequency: CORRECT_FREQUENCY) {
					isAlarmOn := true;
					break;
				}
				[]lightSensor.receive(Frequency: ?) {
					// false emergency lights frequency
					result := fail;
				}
				[]rfidSensor.receive(RFID: OWNER_RFID) {
					hasRFID := true;
					isRFIDCorrect := true;
					
					// restart timer here because we want to give extra time to push button
					t.start(30.0);
				}
				[]rfidSensor.receive(RFID: ?) {
					// false RFID
					hasRFID := true;
					isRFIDCorrect := false;
				}
				[]t.timeout {
					break;
				}
			}
		}
		
		doorSensor.send(ReadDoorStop: {});
		lightSensor.send(ReadLightSwitchStop: {});
		rfidSensor.send(ReadRFIDStop: {});
		
		tearDown();
		
		if(expectEmergency != isAlarmOn or
			expectDoor != hasDoor) {
			return fail;
		}
		
		if(expectRFID == inconc) {
			if(hasRFID) {
				return pass;
			} else {
				return fail;
			}
		} else {
			if(isRFIDCorrect == (expectRFID == pass)) {
				return pass;
			} else {
				return fail;
			}
		}
	}
	
	/**
	 * @deprecated doesn't use latest communication standard with light sensor, also parameters are kinda meh...
	 */
	testcase OldTheftDetectionTestcase(verdicttype expectRFID, boolean expectDoor, verdicttype expectEmergency) runs on me system System{
		var verdicttype v_rfid := none;
		var verdicttype v_elights := none;
		var boolean doorOpened := false;
		
		var me rfidComponent := me.create;
		var me elightsComponent := me.create;
		
		setup();
		
		connect(self:rfidPort, rfidComponent:rfidPort);
		connect(self:emergencyLightPort, elightsComponent:emergencyLightPort);
		
		rfidComponent.start(executeRFIDDetection(OWNER_RFID, THEFT_RFID_CHECK_RATE));
		elightsComponent.start(executeEmergencyLightDetection(SWITCH_TIME_TARGET, ALLOWED_SWITCH_TIME_DEVIATION, MIN_SWITCH_BRIGHTNESS_DIFFERENCE, 5.0));
		
		doorSensor.send(ReadDoorStart:{});
		
		t.start(30.0);
		
		while(doorOpened == false and getverdict == none){
			alt {
				[]rfidPort.receive(verdicttype: ?) -> value v_rfid {
				}
				[]emergencyLightPort.receive(verdicttype: ?) -> value v_elights {
				}
				[]doorSensor.receive(DoorState: true){
					doorOpened := true;
				}
				[]t.timeout {
					setverdict(inconc);
				}
			}
		}
		
		doorSensor.send(ReadDoorStop:{});
		if(v_rfid != pass) {
			rfidPort.send(StopThread: {});
		}
		
		if(v_elights != pass){
		
			// wait for emergency
			t.start(10.0);
		
			alt {
				[]emergencyLightPort.receive(verdicttype: ?) -> value v_elights {
				}
				[]t.timeout {
					setverdict(inconc);
				}
			}
		
			emergencyLightPort.send(StopThread: {});
		}
		
		if(getverdict != none) {
		// we're done
		} else if(	expectDoor != doorOpened or
			v_rfid != expectRFID or
			v_elights != expectEmergency and not (v_elights == inconc and expectEmergency == fail)) {
			setverdict(fail);
		} else {
			setverdict(pass);
		}
		
		rfidComponent.done;
		elightsComponent.done;
		
		disconnect(self:rfidPort, rfidComponent:rfidPort);
		disconnect(self:emergencyLightPort, elightsComponent:emergencyLightPort);
		
		tearDown();
	}
	
	function executeRFIDDetection(RFID rfid, float checkRate) runs on me system System {
		
		var verdicttype result;
		timer loopTimer;
		
		rfidSensor.send(OWNER_RFID);
		
		while(true) {
			loopTimer.start(checkRate);
			
			result := checkRFID(rfid, checkRate);
			
			rfidPort.send(result);
			
			if(result == pass) {
				stop;
			}
			
			alt {
				[]rfidPort.receive(StopThread: {}) {
					stop;
				}
				[]loopTimer.timeout {
				// do nothing
				}
			}
		}
	}
	
	function executeEmergencyLightDetection(float switchTime, float allowedDeviation, integer minDiff, float checkRate) runs on me system System {
		
		var verdicttype result;
		timer loopTimer;
		
		while(true) {
			loopTimer.start(checkRate);
			
			result := checkEmergencyLights(switchTime, allowedDeviation, minDiff, float2int(checkRate / switchTime / 2.0), checkRate);
			
			emergencyLightPort.send(result);
			
			if(result == pass) {
				stop;
			}
			
			alt {
				[]emergencyLightPort.receive(StopThread: {}) {
					stop;
				}
				[]loopTimer.timeout {
				// do nothing
				}
			}
		}
	}
	
	function executeTheftDetectionTestcases() {
		execute(TheftDetectionTestcase_RfidOk_DoorOpens());
		execute(TheftDetectionTestcase_RfidOk_DoorClosed());
		execute(TheftDetectionTestcase_RfidFalse_DoorOpens());
		execute(TheftDetectionTestcase_RfidFalse_DoorClosed());
		execute(TheftDetectionTestcase_RfidMissing_DoorOpens());
		execute(TheftDetectionTestcase_RfidMissing_DoorClosed());
	}
}
