module RFIDModule {
	import from Header all;
	
	/**
	 * @title Correct RFID
	 * @desc Receives detected RFID which ought to be the correct one.
	 * @verdict pass if RFID is currect else fail
	 */
	testcase CorrectRFIDTestcase() runs on me system System {
		setverdict(internalRFIDTestcase(OWNER_RFID, true));
	}
	
	/**
	 * @title False RFID
	 * @desc Receives detected RFID which ought to be a false one.
	 * @verdict pass if RFID is detected and does NOT match. fail if there is NO RFID or the correct one.
	 */
	testcase FalseRFIDTestcase() runs on me system System {
		setverdict(internalRFIDTestcase(FALSE_RFID, false));
	}
	
	/**
	 * @desc tests whether the code on the RFID chip is valid
	 * @param rfid, the RFID code that is to be verified
	 * @param expectCorrectRFID true if match for correct RFID, false if a false one is expected
	 */
	function internalRFIDTestcase(RFID rfid, boolean expectCorrectRFID) runs on me system System return verdicttype {
		var verdicttype result;
		
		setup();
			
		result := checkRFID(rfid, 10.0);
		
		tearDown();
		
		if((result == pass and expectCorrectRFID) or (result == fail and not expectCorrectRFID)){
			return pass;
		} else if((result == fail and expectCorrectRFID) or (result == pass and not expectCorrectRFID)){
			return fail;
		} else {
			return inconc;
		}
	}
	
	function executeRFIDTestcases() {
		execute(CorrectRFIDTestcase());
		execute(FalseRFIDTestcase());
	}
}
