/**
 * @desc Utility functions
 */
module Functions {
	import from PhyIOAUX all;
	import from TTlibrary all;
	
	import from Components all;
	import from Parameters all;
	import from UnitTests all;
	
	
	/**
	 * @desc Test to check for valid rfid
	 * @param RFID in question, time until timeout
	 * @deprecated should be removed
	 */
	function checkRFID(RFID rfid, float time) runs on me system System return verdicttype {
		var verdicttype result := none;
		
		rfidSensor.send(ReadRFIDStart:{});
		t.start(time);
		
		alt{
			[]rfidSensor.receive(RFID: rfid){
				result := pass;
			}
			[]rfidSensor.receive(RFID: ?) {
				result := fail;
			}
			[]t.timeout {
				result := inconc;
			}
		}
		
		rfidSensor.send(ReadRFIDStop:{});
		
		if(result != none) {
			return result;
		}
		
		return inconc;
	}
		
	/**
	 * @desc checks if the measured distance is within a certain range of an expected value
	 */
	function compareDist(integer measuredDistance, integer expectedDistance) return boolean {
		// TODO tried to use abs_int() but no external implementation for abs()??
		var integer diff := measuredDistance - expectedDistance;
		
		if(diff < 0) {
			diff := -diff;
		}
		
		return diff <= ALLOWED_DISTANCE_DEVIATION;
	}

	/**
	 * @desc notify UI about current stage
	 * @param id stage number, make sure it's defined in the parameters of the testcase
	 * @Ã¼aram timeWindow time in seconds, 0 == no time window
	 */
	function setStage(integer id, float timeWindow) {
		if(NOTIFY_UI) {
			action("stage" & int2str(id) & ",timeWindow:" & int2str(float2int(timeWindow)));
		}
	}
	
	/**
	 * @desc maps all ports
	 */
	function setup() runs on me system System {
		if(not SIMULATION) {
			// tests using real Arduinos
			
			map(self:sutConfig,			system:sutConfig)		param (SUT_RS232_CONFIG, DeviceID_1);
    		
			if(MAP_TESTER){
				map(self:testerConfig,		system:testerConfig)	param (TESTER_RS232_CONFIG, DeviceID_2);
				map(self:lightSensor,		system:lightSensor)		param (DeviceID_2, SensorID_2);
			}
    		
			map(self:led, 				system:led) 			param (DeviceID_1, SensorID_1);
			map(self:rfidSensor,		system:rfidSensor)		param (DeviceID_1, SensorID_3);
			map(self:doorSensor,		system:doorSensor)		param (DeviceID_1, SensorID_4);
			map(self:distanceSensor,	system:distanceSensor)	param (DeviceID_1, SensorID_5);
			map(self:theftDetection,	system:theftDetection)	param (DeviceID_1, SensorID_6);
		} else {
			// tests using simulated Arduino behaviour
			
			simulation := System.create;
			
			connect(self:sutConfig,			simulation:sutConfig);
			
			connect(self:led, 				simulation:led);
			connect(self:rfidSensor,		simulation:rfidSensor);
			connect(self:doorSensor,		simulation:doorSensor);
			connect(self:distanceSensor,	simulation:distanceSensor);
			connect(self:theftDetection,	simulation:theftDetection);
			connect(self:lightSensor,		simulation:lightSensor);
			
			simulation.start(main());
		}
	}
	
	/**
	 * @desc unmaps all ports
	 */
	function tearDown() runs on me system System {
		if(not SIMULATION) {
			unmap(self:led);
		
			unmap(self:rfidSensor);
			unmap(self:doorSensor);
			unmap(self:distanceSensor);
			unmap(self:theftDetection);
			unmap(self:sutConfig);
			
			if(MAP_TESTER){
				unmap(self:lightSensor);
				unmap(self:testerConfig);
			}
			
		} else {
			sutConfig.send(StopThread: {});
			
			disconnect(self:led);
			disconnect(self:lightSensor);
			disconnect(self:rfidSensor);
			disconnect(self:doorSensor);
			disconnect(self:distanceSensor);
			disconnect(self:theftDetection);
			
			simulation.done;
		}
	}
}
