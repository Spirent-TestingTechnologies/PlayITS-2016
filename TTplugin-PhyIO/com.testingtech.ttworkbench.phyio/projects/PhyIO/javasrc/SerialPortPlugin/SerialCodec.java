package SerialPortPlugin;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import org.etsi.ttcn.tci.TciCDProvided;
import org.etsi.ttcn.tci.Type;
import org.etsi.ttcn.tci.Value;
import org.etsi.ttcn.tri.TriMessage;

import com.testingtech.ttcn.extension.CodecProvider;
import com.testingtech.ttcn.tri.AbstractCodecPlugin;
import com.testingtech.ttcn.tri.TriMessageImpl;

import de.tu_berlin.cs.uebb.muttcn.runtime.RB;

public class SerialCodec extends AbstractCodecPlugin implements CodecProvider {

	@Override
	public Value decode(TriMessage message, Type decodingHypothesis) {
		// wird anscheinend gar nicht verwendet?
		try {
			System.out.println("decode : " + new String(message.getEncodedMessage(), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public TriMessage encode(Value value) {
		
		TriMessage message;
		String mes; // <- the unconverted String that will be send as bytes
		String valueType = value.getType().getName();
		
		// The following if statements check for the type of the value
		// then encode it accordingly
		if(valueType == "SerialConfig"){
			// convert the type to a useable string
			mes = SerialConfig2String(value.toString());
			// convert the usable string to TriMessage
			message = Str2Msg(mes);
		}
		else if(valueType == "SerialMessage"){
			mes = SerialMessage2String(value.toString());
			message = Str2Msg(mes);
		}
		else{
			// if it doesn't fit any type, then just send the String
			message = Str2Msg(value.toString());
		}
		return message;
	}
	
	public TciCDProvided getCodec(RB RB, String encodingRule) {
		return this;
	}

	
	/**
	 * Converts a String that is generated by reading the SerialMessage as a String
	 * to a more String that can be interpreted by the PhyIO
	 * @param SerialMessageAsString A SerialMessage as String-view
	 * @return A more useful String for the PhyIO
	 */
	private String SerialMessage2String(String SerialMessageAsString) {
		String mes = SerialMessageAsString;
		mes = mes.replace("{", "");
		mes = mes.replace("moduleID", "");
		mes = mes.replace("params", "");
		mes = mes.replace("functionID", "");
		mes = mes.replace(" := ", "");
		mes = mes.replace("}", "");
		mes = mes.substring(9, mes.length());
		return mes;
	}

	/**
	 * Converts a String that is generated by reading the SerialConfig as a String
	 * to a more String that can be interpreted by the PhyIO
	 * @param SerialConfigAsString A SerialConfig as String-view
	 * @return A more useful String for the PhyIO
	 */
	private String SerialConfig2String(String SerialConfigAsString){
		String mes = SerialConfigAsString;
		mes = mes.replaceAll("\"", "");
		mes = mes.replaceAll("BaudRate := ", "");
		mes = mes.replaceAll(" }", "");
		mes = mes.substring(14, mes.length());
		return mes;
	}
	
	/**
	 * Converts a String into a TriMessage
	 * @param s the String that will be converted to a TriMessage. 
	 * This string will always be treated as "UTF-8"-encoded
	 * @return
	 */
	private TriMessage Str2Msg(String s){
		return TriMessageImpl.valueOf(s.getBytes(Charset.forName("UTF-8")));
	}

}
