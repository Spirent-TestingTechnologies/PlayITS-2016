/*
 * ----------------------------------------------------------------------------
 *  (C) Copyright Testing Technologies 2015-2016.  All Rights Reserved.
 *
 *  All copies of this program, whether in whole or in part, and whether
 *  modified or not, must display this and all other embedded copyright
 *  and ownership notices in full.
 *
 *  See the file COPYRIGHT for details of redistribution and use.
 *
 *  You should have received a copy of the COPYRIGHT file along with
 *  this file; if not, write to the Testing Technologies,
 *  Michaelkirchstrasse 17/18 10179 Berlin, Germany
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 * ----------------------------------------------------------------------------
 */
//** @desc Testing Lightsensor data
module Lights {
	import from PhyIOAUX all;
	import from Components all;
	import from Header all;
	
	//** @desc Testcase to check whether headlights are switched on or off
	testcase HeadLightsOnTestcase() runs on me system System{
		setverdict(HeadLightsTestcase_internal(true));
	}

	//** @desc Testcase to check whether headlights are switched on or off
	testcase HeadLightsOffTestcase() runs on me system System{
		setverdict(HeadLightsTestcase_internal(false));
	}
	
	function HeadLightsTestcase_internal(boolean expectOn) runs on me system System return verdicttype{
		var template State LED_OFF := {(0..BRIGHTNESS_THRESHOLD), ?};
		var verdicttype result := none;
		
		map(self:config, system:config) param (SUT_RS232_CONFIG, DeviceID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_2);
		// needed as long as we test on a single arduino
		map(self:led, system:led) param (DeviceID_1, SensorID_1);
		
		if(expectOn) {
			// unreliable when only sent once (?)
			led.send(switchLED_ON);
			led.send(switchLED_ON);
		}
		
		lightSensor.send(ReadBrightness:{});
		t.start(5.0);
		alt{
			[]lightSensor.receive(LED_OFF){
				if(expectOn) {
					result := fail;
				} else {
					result := pass;
				}
			}
			[]lightSensor.receive(State: {?, ?}) {
				if(expectOn) {
					result := pass;
				} else {
					result := fail;
				}
			}
			[] t.timeout {
				result := inconc;
			}
			[] config.receive {
				repeat;
			}
			[] any port.receive {
				result := inconc;
			}
		}
		
		if(expectOn) {
			led.send(switchLED_OFF);
		}
		
		return result;
	}
	/** @desc tests emergency lights
	 * reads timestamps of LED status change and compares it to predefined values
	 */
	testcase EmergencyLights() runs on me system System{
		map(self:config, system:config) param (SUT_RS232_CONFIG, DeviceID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_1);
		
		setverdict(f_checkEmergencyLights(SWITCH_TIME_TARGET,ALLOWED_SWITCH_TIME_DEVIATION, MIN_SWITCH_BRIGHTNESS_DIFFERENCE, 5, 10.0));
	}
	/**
	 * @desc tests emergency lights
	 * sends an expected switch time target to the SUT
	 * reads the sensors output, which is the average time elapsed between switches
	 */
	testcase EmergencyLights2() runs on me system System {
		var Frequency frequency;
		
		map(self:config, system:config) param (SUT_RS232_CONFIG, DeviceID_1);
		map(self:led, system:led) param (DeviceID_1, SensorID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_2);
		
		led.send(BlinkLEDStart: 1.0 / SWITCH_TIME_TARGET);
		
		// wait a bit to make sure that arduino had enough time to react
		t.start(0.25);
		
		lightSensor.send(ReadFrequencyStart: MIN_SWITCH_BRIGHTNESS_DIFFERENCE);
		
		t.start(10.0);
		lightSensor.send(ReadFrequencyStop: {});
		
		alt {
			
			[]lightSensor.receive(Frequency: 0.0) -> value frequency {
				setverdict(fail);
			}
			[]lightSensor.receive(Frequency: (SWITCH_TIME_TARGET - ALLOWED_SWITCH_TIME_DEVIATION .. SWITCH_TIME_TARGET + ALLOWED_SWITCH_TIME_DEVIATION)) -> value frequency {
				setverdict(pass);
			}
			[]lightSensor.receive(Frequency: ?) -> value frequency {
				setverdict(fail);
			}
			[]t.timeout {
				setverdict(inconc);
			}
		}
		
		led.send(BlinkLEDStop: {});
	}
	
	function executeLightsTestcases() {
		execute(HeadLightsOnTestcase());
		execute(HeadLightsOffTestcase());
		
		execute(EmergencyLights());
	}
}
