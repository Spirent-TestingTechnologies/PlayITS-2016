/*
 * ----------------------------------------------------------------------------
 *  (C) Copyright Testing Technologies 2015-2016.  All Rights Reserved.
 *
 *  All copies of this program, whether in whole or in part, and whether
 *  modified or not, must display this and all other embedded copyright
 *  and ownership notices in full.
 *
 *  See the file COPYRIGHT for details of redistribution and use.
 *
 *  You should have received a copy of the COPYRIGHT file along with
 *  this file; if not, write to the Testing Technologies,
 *  Michaelkirchstrasse 17/18 10179 Berlin, Germany
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 * ----------------------------------------------------------------------------
 */
/**
 * @shortdesc Lights
 * @desc Testcases concerning headlights and emergency lights
 * @relexecpath clf/Testsuite.clf
 */
module Lights {
	import from PhyIOAUX all;
	import from TTlibrary_UnitTest all;

	import from Components all;
	import from Functions all;
	import from Parameters all;
	
	/**
	 * @shortdesc Headlights On
	 * @desc Turns the LED on then checks using the light sensor if it really is turned on.
	 * @stage 1:Switch on LED
	 * @stage 2:Wait for light sensor
	 */
	testcase HeadLightsOnTestcase() runs on me system System {
		var VerdictDescription verdict := internalHeadLightsTestcase(true);
		setverdict(verdict.verdict, verdict.reason);
	}

	/**
	 * @shortdesc Headlights Off
	 * @desc Turns the LED off then checks using the light sensor if it really is turned off.
	 * @stage 1:Switch off LED
	 * @stage 2:Wait for light sensor
	 */
	testcase HeadLightsOffTestcase() runs on me system System {
		var VerdictDescription verdict := internalHeadLightsTestcase(false);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @desc Set LED in desired state, then measure its brightness.
	 * @param expectLEDOn the expected state of the LED
	 * @return verdict
	 * @verdict to pass the measurement has to reveal the LED to be in the desired state. If it's not, then it fails.
	 * 			The verdict is inconc if we get not result or a message of an unexpected type.
	 */
	function internalHeadLightsTestcase(boolean expectLEDOn) runs on me system System return VerdictDescription {
		var default alts := activate(alt_default());
		var template State LED_OFF := {(0..BRIGHTNESS_THRESHOLD), ?};
		var boolean isLEDOn := false;
		var boolean measuredLED := false;
		
		setup();
		
		setStage(1, 0.0);
		
		if(expectLEDOn) {
			led.send(switchLED_ON);
		} else {
			// should be off already but we want to be sure
			led.send(switchLED_OFF);
		}
		
		// wait a bit to make sure that the LED really has the desired state by now
		t.start(0.5);
		t.timeout;
		
		lightSensor.send(READ_BRIGHTNESS);
		
		setStage(2, TIME_HEADLIGHTS);
		
		t.start(TIME_HEADLIGHTS);
		
		alt{
			[]lightSensor.receive(LED_OFF){
				measuredLED := true;
				isLEDOn := false;
			}
			[]lightSensor.receive(State: {?, ?}) {
				measuredLED := true;
				isLEDOn := true;
			}
			[] t.timeout {
				measuredLED := false;
			}
		}
		
		if(expectLEDOn) {
			led.send(switchLED_OFF);
		}
		
		tearDown();
		
		if(not measuredLED) {
			return verdictInconc("No message received.");
		} else if(expectLEDOn != isLEDOn) {
			return verdictFail("Unexpected LED state.");
		} else {
			return verdictPass();
		}
	}
	
	
	/**
	 * @shortdesc Emergency Lights
	 * @desc sends an expected switch time target to the SUT.
	 * 		 reads the sensors output, which is the average time elapsed between
	 * 		 switches. These have to be near the expected value.
	 * @verdict pass when emergency light blink with expected frequency, fail otherwise
	 * @stage 1:Start to blink
	 * @stage 2:Wait for frequency detection
	 */
	testcase EmergencyLightsTestcase() runs on me system System {
		var default alts := activate(alt_default());
		var Frequency frequency;
		
		setup();
		
		setStage(1, 0.0);
		
		led.send(BlinkLEDStart: BLINK_FREQUENCY_TARGET);
		
		// wait a bit to make sure that arduino had enough time to react
		t.start(0.25);
		
		lightSensor.send(ReadFrequencyStart: MIN_SWITCH_BRIGHTNESS_DIFFERENCE);
		
		t.start(TIME_EMERGENCY_LIGHTS);
		lightSensor.send(ReadFrequencyStop: {});
		
		setStage(2, TIME_EMERGENCY_LIGHTS);
		
		t.start(2.0);
		
		alt {
			
			[]lightSensor.receive(Frequency: 0.0) -> value frequency {
				setverdict(fail, "Emergency lights are not on.");
			}
			[]lightSensor.receive(CORRECT_FREQUENCY) -> value frequency {
				setverdict(pass);
			}
			[]lightSensor.receive(Frequency: ?) -> value frequency {
				setverdict(fail, "Wrong frequency", frequency);
			}
			[]t.timeout {
				setverdict(inconc, "Timeout");
			}
		}
		
		led.send(BlinkLEDStop: {});
		
		tearDown();
	}
	
	function executeLightsTestcases() {
		execute(HeadLightsOnTestcase());
		execute(HeadLightsOffTestcase());
		execute(EmergencyLightsTestcase());
	}
}
