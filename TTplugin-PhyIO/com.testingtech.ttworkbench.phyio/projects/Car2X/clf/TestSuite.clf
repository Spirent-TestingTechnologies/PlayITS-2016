<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE campaignloader PUBLIC "-//TESTING TECH//DTD MLF//2.0" "mlf.dtd">
<!-- This file has been automatically generated by TTworkbench Professional 1.1.21.201601131441I, TTthreeCompiler v2.0.6 build 201601131403 on Wed Mar 16 13:43:39 CET 2016 -->
<campaignloader>
  <campaign Name="TestSuite" Control="false">
    <testadapter Name="com.testingtech.ttcn.tri.PluginTestAdapter" File="">
      <description>Tester_taconfig.xml</description>
    </testadapter>
    <module Name="TheftDetection" File="ttcn3build/TheftDetection.jar" Package="generated_ttcn"/>
    <module Name="RFIDModule" File="ttcn3build/RFIDModule.jar" Package="generated_ttcn"/>
    <module Name="Lights" File="ttcn3build/Lights.jar" Package="generated_ttcn"/>
    <module Name="Doors" File="ttcn3build/Doors.jar" Package="generated_ttcn"/>
    <module Name="TTlibrary_HTTPTest" File="" Package="generated_ttcn"/>
    <module Name="Parameters" File="ttcn3build/Parameters.jar" Package="generated_ttcn"/>
    <module Name="Distance" File="ttcn3build/Distance.jar" Package="generated_ttcn"/>
    <module Name="TestSuite" File="ttcn3build/TestSuite.jar" Package="generated_ttcn"/>
    <parameter Name="OWNER_RFID" Module="Parameters" ModuleOfTypeDecl="PhyIOAUX">
      <description></description>
      <type>RFID</type>
      <value><![CDATA[<Values:record type="RFID" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id1"><Values:value>194</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id2"><Values:value>96</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id3"><Values:value>196</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id4"><Values:value>169</Values:value></Values:integer></Values:record>]]></value>
      <default><![CDATA[<Values:record type="RFID" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id1"><Values:value>194</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id2"><Values:value>96</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id3"><Values:value>196</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id4"><Values:value>169</Values:value></Values:integer></Values:record>]]></default>
    </parameter>
    <parameter Name="FALSE_RFID" Module="Parameters" ModuleOfTypeDecl="PhyIOAUX">
      <description></description>
      <type>RFID</type>
      <value><![CDATA[<Values:record type="RFID" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id1"><Values:value>34</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id2"><Values:value>55</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id3"><Values:value>89</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id4"><Values:value>144</Values:value></Values:integer></Values:record>]]></value>
      <default><![CDATA[<Values:record type="RFID" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id1"><Values:value>34</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id2"><Values:value>55</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id3"><Values:value>89</Values:value></Values:integer><Values:integer type="unsignedbyte" module="TTCN3AUX" name="id4"><Values:value>144</Values:value></Values:integer></Values:record>]]></default>
    </parameter>
    <parameter Name="THEFT_RFID_CHECK_RATE" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.1</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.1</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="BRIGHTNESS_THRESHOLD" Module="Parameters" ModuleOfTypeDecl="PhyIOAUX">
      <description></description>
      <type>Brightness</type>
      <value><![CDATA[<Values:integer type="Brightness" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:value>512</Values:value></Values:integer>]]></value>
      <default><![CDATA[<Values:integer type="Brightness" module="PhyIOAUX" xmlns:Values="Values.xsd"><Values:value>512</Values:value></Values:integer>]]></default>
    </parameter>
    <parameter Name="ALLOWED_SWITCH_TIME_DEVIATION" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.1</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.1</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="SWITCH_TIME_TARGET" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.5</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>0.5</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="MIN_SWITCH_BRIGHTNESS_DIFFERENCE" Module="Parameters">
      <description></description>
      <type>integer</type>
      <value><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>100</Values:value></Values:integer>]]></value>
      <default><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>100</Values:value></Values:integer>]]></default>
    </parameter>
    <parameter Name="ALLOWED_DISTANCE_DEVIATION" Module="Parameters">
      <description></description>
      <type>integer</type>
      <value><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>3</Values:value></Values:integer>]]></value>
      <default><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>3</Values:value></Values:integer>]]></default>
    </parameter>
    <parameter Name="EXPECTED_DISTANCE_10" Module="Parameters">
      <description></description>
      <type>integer</type>
      <value><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>10</Values:value></Values:integer>]]></value>
      <default><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>10</Values:value></Values:integer>]]></default>
    </parameter>
    <parameter Name="EXPECTED_DISTANCE_20" Module="Parameters">
      <description></description>
      <type>integer</type>
      <value><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>20</Values:value></Values:integer>]]></value>
      <default><![CDATA[<Values:integer type="integer" xmlns:Values="Values.xsd"><Values:value>20</Values:value></Values:integer>]]></default>
    </parameter>
    <parameter Name="SUT_RS232_CONFIG" Module="Parameters" ModuleOfTypeDecl="RS232ConfigPortAux">
      <description> moduleparameters of the system under test</description>
      <type>RS232Config</type>
      <value><![CDATA[<Values:record type="RS232Config" module="RS232ConfigPortAux" xmlns:Values="Values.xsd"><Values:universal_charstring type="universal charstring" name="serialPortName"><Values:value>COM3</Values:value></Values:universal_charstring><Values:integer type="unsignedlong" module="TTCN3AUX" name="baudRate"><Values:value>115200</Values:value></Values:integer><Values:integer type="DataBits" module="RS232ConfigPortAux" name="dataBits"><Values:value>8</Values:value></Values:integer><Values:integer type="StopBits" module="RS232ConfigPortAux" name="stopBits"><Values:value>1</Values:value></Values:integer><Values:enumerated type="Parity" module="RS232ConfigPortAux" name="parity"><Values:value>c_ParityNone</Values:value></Values:enumerated><Values:bitstring type="FlowControl" module="RS232ConfigPortAux" name="flowControl"><Values:value>0000</Values:value></Values:bitstring><Values:boolean type="boolean" name="checkDSR"><Values:value>false</Values:value></Values:boolean></Values:record>]]></value>
      <default><![CDATA[<Values:record type="RS232Config" module="RS232ConfigPortAux" xmlns:Values="Values.xsd"><Values:universal_charstring type="universal charstring" name="serialPortName"><Values:value>COM3</Values:value></Values:universal_charstring><Values:integer type="unsignedlong" module="TTCN3AUX" name="baudRate"><Values:value>115200</Values:value></Values:integer><Values:integer type="DataBits" module="RS232ConfigPortAux" name="dataBits"><Values:value>8</Values:value></Values:integer><Values:integer type="StopBits" module="RS232ConfigPortAux" name="stopBits"><Values:value>1</Values:value></Values:integer><Values:enumerated type="Parity" module="RS232ConfigPortAux" name="parity"><Values:value>c_ParityNone</Values:value></Values:enumerated><Values:bitstring type="FlowControl" module="RS232ConfigPortAux" name="flowControl"><Values:value>0000</Values:value></Values:bitstring><Values:boolean type="boolean" name="checkDSR"><Values:value>false</Values:value></Values:boolean></Values:record>]]></default>
    </parameter>
    <parameter Name="TESTER_RS232_CONFIG" Module="Parameters" ModuleOfTypeDecl="RS232ConfigPortAux">
      <description> moduleparameters of the tester</description>
      <type>RS232Config</type>
      <value><![CDATA[<Values:record type="RS232Config" module="RS232ConfigPortAux" xmlns:Values="Values.xsd"><Values:universal_charstring type="universal charstring" name="serialPortName"><Values:value>COM7</Values:value></Values:universal_charstring><Values:integer type="unsignedlong" module="TTCN3AUX" name="baudRate"><Values:value>115200</Values:value></Values:integer><Values:integer type="DataBits" module="RS232ConfigPortAux" name="dataBits"><Values:value>8</Values:value></Values:integer><Values:integer type="StopBits" module="RS232ConfigPortAux" name="stopBits"><Values:value>1</Values:value></Values:integer><Values:enumerated type="Parity" module="RS232ConfigPortAux" name="parity"><Values:value>c_ParityNone</Values:value></Values:enumerated><Values:bitstring type="FlowControl" module="RS232ConfigPortAux" name="flowControl"><Values:value>0000</Values:value></Values:bitstring><Values:boolean type="boolean" name="checkDSR"><Values:value>false</Values:value></Values:boolean></Values:record>]]></value>
      <default><![CDATA[<Values:record type="RS232Config" module="RS232ConfigPortAux" xmlns:Values="Values.xsd"><Values:universal_charstring type="universal charstring" name="serialPortName"><Values:value>COM7</Values:value></Values:universal_charstring><Values:integer type="unsignedlong" module="TTCN3AUX" name="baudRate"><Values:value>115200</Values:value></Values:integer><Values:integer type="DataBits" module="RS232ConfigPortAux" name="dataBits"><Values:value>8</Values:value></Values:integer><Values:integer type="StopBits" module="RS232ConfigPortAux" name="stopBits"><Values:value>1</Values:value></Values:integer><Values:enumerated type="Parity" module="RS232ConfigPortAux" name="parity"><Values:value>c_ParityNone</Values:value></Values:enumerated><Values:bitstring type="FlowControl" module="RS232ConfigPortAux" name="flowControl"><Values:value>0000</Values:value></Values:bitstring><Values:boolean type="boolean" name="checkDSR"><Values:value>false</Values:value></Values:boolean></Values:record>]]></default>
    </parameter>
    <parameter Name="TIME_HEADLIGHTS" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_EMERGENCY_LIGHTS" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>10.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>10.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_DOORS" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_RFID" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>10.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>10.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_THEFT_DETECTION" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>30.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>30.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_DISTANCE_FIRST_MEASUREMENT" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="TIME_DISTANCE_SINGLE_MEASUREMENT" Module="Parameters">
      <description></description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>3.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>3.0</Values:value></Values:float>]]></default>
    </parameter>
    <parameter Name="SINGLE_DISTANCE" Module="Parameters" ModuleOfTypeDecl="Parameters">
      <description></description>
      <type>DistancesToCheck</type>
      <value><![CDATA[<Values:record_of type="DistancesToCheck" module="Parameters" xmlns:Values="Values.xsd"><Values:integer type="integer" name="0"><Values:value>10</Values:value></Values:integer></Values:record_of>]]></value>
      <default><![CDATA[<Values:record_of type="DistancesToCheck" module="Parameters" xmlns:Values="Values.xsd"><Values:integer type="integer" name="0"><Values:value>10</Values:value></Values:integer></Values:record_of>]]></default>
    </parameter>
    <parameter Name="T_RESPONSE" Module="TTlibrary_HTTPTest">
      <description> The response time for a HTTP answer.
     </description>
      <type>float</type>
      <value><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></value>
      <default><![CDATA[<Values:float type="float" xmlns:Values="Values.xsd"><Values:value>5.0</Values:value></Values:float>]]></default>
    </parameter>
    <testcase Name="SingleDistanceTestcase" Alias="" Module="Distance" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Move object a certain distance in front of the sensor and measure it </description>
      <metadata>
        <comment>/**
	 * @shortdesc Single Distance
	 * @desc Move object a certain distance in front of the sensor and measure it
	 * @verdict pass if the distance sensor yields the expected distance else fail
	 * @stage 1: Distance: 10cm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="VariousDistancesTestcase" Alias="" Module="Distance" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Move object a certain distance in front of the sensor and measure it. Repeat this for a number of values. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Various Distances
	 * @desc Move object a certain distance in front of the sensor and measure it. Repeat this for a number of values.
	 * @verdict pass if the distance sensor yields the expected distances else fail
	 * @stage 1: Distance: 30cm
	 * @stage 2: Distance: 10cm
	 * @stage 3: Distance: 20cm
	 * @stage 4: Distance: 50cm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="OpenDoorTestcase" Alias="" Module="Doors" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> In this testcase the door should be opened once. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Open Door
	 * @desc In this testcase the door should be opened once.
	 * @verdict passes if the door is opened within the given time window otherwise it fails.
	 * @stage 1:Open door
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="HeadLightsOnTestcase" Alias="" Module="Lights" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Turns the LED on then checks using the light sensor if it really is turned on. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Headlights On
	 * @desc Turns the LED on then checks using the light sensor if it really is turned on.
	 * @stage 1:Switch on LED
	 * @stage 2:Wait for light sensor
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="HeadLightsOffTestcase" Alias="" Module="Lights" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Turns the LED off then checks using the light sensor if it really is turned off. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Headlights Off
	 * @desc Turns the LED off then checks using the light sensor if it really is turned off.
	 * @stage 1:Switch off LED
	 * @stage 2:Wait for light sensor
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="OldEmergencyLightsTestcase" Alias="" Module="Lights" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> reads on/off switches of LED to dertermin if emergency lights are on </description>
      <metadata>
        <comment>/**
	 * @shortdesc Emergency Lights (old)
	 * @desc reads on/off switches of LED to dertermin if emergency lights are on
	 * @verdict pass when emergency light blink with expected frequency, fail otherwise
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="EmergencyLightsTestcase" Alias="" Module="Lights" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> sends an expected switch time target to the SUT. 		 reads the sensors output, which is the average time elapsed between 		 switches. These have to be near the expected value. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Emergency Lights
	 * @desc sends an expected switch time target to the SUT.
	 * 		 reads the sensors output, which is the average time elapsed between
	 * 		 switches. These have to be near the expected value.
	 * @verdict pass when emergency light blink with expected frequency, fail otherwise
	 * @stage 1:Start to blink
	 * @stage 2:Wait for frequency detection
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="CorrectRFIDTestcase" Alias="" Module="RFIDModule" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Receives detected RFID which ought to be the correct one. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Correct RFID
	 * @desc Receives detected RFID which ought to be the correct one.
	 * @verdict pass if RFID is currect else fail
	 * @stage 1:Wait for RFID
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="FalseRFIDTestcase" Alias="" Module="RFIDModule" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Receives detected RFID which ought to be a false one. </description>
      <metadata>
        <comment>/**
	 * @shortdesc False RFID
	 * @desc Receives detected RFID which ought to be a false one.
	 * @verdict pass if RFID is detected and does NOT match. fail if there is NO RFID or the correct one.
	 * @stage 1:Wait for RFID
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidOk_DoorOpens" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with the correct RFID and door opening. Expect no alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (correct RFID, door opens)
	 * @desc Theft detection with the correct RFID and door opening. Expect no alarm.
	 * @verdict pass if RFID is correct, door opens and no alarm. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidOk_DoorClosed" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with the correct RFID and door doesn&apos;t open. Expect no alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (correct RFID, door remains closed)
	 * @desc Theft detection with the correct RFID and door doesn&apos;t open. Expect no alarm.
	 * @verdict pass if RFID is correct, door doesn&apos;t open and no alarm. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidFalse_DoorOpens" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with a false RFID and door opening. Expect alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (false RFID, door opens)
	 * @desc Theft detection with a false RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is false, door opens and alarm goes off. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read false RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidFalse_DoorClosed" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with the false RFID and door doesn&apos;t open. Expect no alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (flase RFID, door remains closed)
	 * @desc Theft detection with the false RFID and door doesn&apos;t open. Expect no alarm.
	 * @verdict pass if RFID is false, door doesn&apos;t open and no alarm. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 2:Read false RFID
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidMissing_DoorOpens" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with no RFID and door opening. Expect alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (no RFID, door opens)
	 * @desc Theft detection with no RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is missing, door opens and alarm goes off. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="TheftDetectionTestcase_RfidMissing_DoorClosed" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description> Theft detection with the no RFID and door doesn&apos;t open. Expect no alarm. </description>
      <metadata>
        <comment>/**
	 * @shortdesc Theft Detection (no RFID, door remains closed)
	 * @desc Theft detection with the no RFID and door doesn&apos;t open. Expect no alarm.
	 * @verdict pass if RFID is missing, door doesn&apos;t open and no alarm. inconc if light sensor doesn&apos;t inform about
	 * 			the alarm. Otherwise fail
	 * @stage 3:Check for alarm
	 */</comment>
      </metadata>
    </testcase>
    <testcase Name="OldTheftDetectionTestcase" Alias="" Module="TheftDetection" Retries="0" Runs="1" ActionOnFail="continue" Selection="true" Verdict="none">
      <description></description>
      <metadata>
        <comment>/**
	 * @deprecated doesn&apos;t use latest communication standard with light sensor, also parameters are kinda meh...
	 */</comment>
      </metadata>
    </testcase>
  </campaign>
</campaignloader>
