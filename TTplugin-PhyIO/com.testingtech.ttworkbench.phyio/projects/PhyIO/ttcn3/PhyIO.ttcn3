module PhyIO {
	
	import from PhyIOTemplate all;

	import from PhyIOConfig all;
	
	import from PhyIOConstants all;

	external function Serial(charstring modus, charstring command) return charstring;
	
	type component Test{
		port PhyIOport serialPort;
	}
	
	// set the default values and enable the interaction in the testcase window
	modulepar SerialConfig Connection := {
		PortName := "/dev/cu.HC-05-DevB",         //Bluetooth
//		PortName := "/dev/cu.wchusbserialfa140",  //USB
		BaudRate := 9600
	}
	
// --------------------------------- simple send test cases ---------------------------------
		
	testcase LEDTest() runs on Test system Test{
		timer t;
		log("Connect to Port");
		map (mtc:serialPort, system:serialPort) param (Connection);
			

		
		log("Turn on blue LED");
		serialPort.send(m_sendSerial(SubDevice1, LED01, SET, {1}));
		t.start(2.0); t.timeout;   // <- small Delay, that ensures, 
								   // that everything will be send
								   // and it isn't too fast while switching
		log("Turn off blue LED");						   
		serialPort.send(m_sendSerial(SubDevice1, LED01, STOP, {}));
		t.start(2.0); t.timeout;
		
		log("Turn on bi-diractional LED in green mode");
		serialPort.send(m_sendSerial(SubDevice2, LED01, SET, {1}));
		t.start(2.0); t.timeout;
				
		log("Turn on bi-diractional LED in red mode");
		serialPort.send(m_sendSerial(SubDevice2, LED01, SET, {2}));
		t.start(2.0); t.timeout;
				
		log("Turn off bi-diractional LED");
		serialPort.send(m_sendSerial(SubDevice2, LED01, STOP, {}));
		t.start(2.0); t.timeout;
		
		log("Let the bi-diractional LED blink in green mode with a frequency of 3Hz");
		serialPort.send(m_sendSerial(SubDevice2, LED01, BLINK, {1, 3}));
		t.start(5.0); t.timeout;
		
		log("Let the blue LED blink with a frequency of 1Hz");
		serialPort.send(m_sendSerial(SubDevice1, LED01, BLINK, {1, 1}));
		t.start(5.0); t.timeout;
		
		log("Let the bi-diractional LED blink in green mode with a frequency of 4Hz");
		serialPort.send(m_sendSerial(SubDevice2, LED01, BLINK, {2, 4}));
		t.start(5.0); t.timeout;
		
		log("Let the blue LED blink with a frequency of 2Hz");
		serialPort.send(m_sendSerial(SubDevice1, LED01, BLINK, {1, 2}));
		t.start(5.0); t.timeout;
		
		log("Let the bi-diractional LED blink between both colours with a frequency of 5Hz");
		serialPort.send(m_sendSerial(SubDevice2, LED01, BLINK, {3, 5}));
		t.start(5.0); t.timeout;
		
		log("Turn off blue LED");	
		serialPort.send(m_sendSerial(SubDevice1, LED01, STOP, {}));
		t.start(1.1); t.timeout;
		
		log("Turn off bi-diractional LED");
		serialPort.send(m_sendSerial(SubDevice2, LED01, STOP, {}));
		
		
		log("Disconnect from Port");
		unmap (mtc:serialPort, system:serialPort);
		
		setverdict(pass, "LEDs are running as planned");
	}
	
	
	testcase MotorTest() runs on Test system Test{
		timer t;
		log("Connect to Port");
		map (mtc:serialPort, system:serialPort) param (Connection);
		
		log("Turn on Motor with a speed of 40");
		serialPort.send(m_sendSerial(SubDevice1, MM01, SET, {40}));
		t.start(5.0); t.timeout; 
		
		log("Hit the breaks");
		serialPort.send(m_sendSerial(SubDevice1, MM01, STOP, {}));
		t.start(5.0); t.timeout; 
		
		log("Turn on Motor with a speed of -70");
		serialPort.send(m_sendSerial(SubDevice1, MM01, SET, {-70}));
		t.start(5.0); t.timeout; 
		
		log("Hit the breaks");
		serialPort.send(m_sendSerial(SubDevice1, MM01, STOP, {}));
		t.start(5.0); t.timeout; 
		

		log("Disconnect from Port");
		unmap (mtc:serialPort, system:serialPort);

		setverdict(pass, "Motor is running as planned");
	}
			

	testcase LEDStripTest() runs on Test system Test{
		timer t;
		log("Connect to Port");
		map (mtc:serialPort, system:serialPort) param (Connection);

		
		log("Turn on LED Strip");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {}));
		t.start(2.0); t.timeout; 
		
		for (var integer i := 1; i <= 16; i := i + 1) {
			log("Change to Colour " & int2str(i));
			serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {COLOUR, i}));
			t.start(2.0); t.timeout; 
		}
		
		log("Entering 'Strobe'-Mode");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {STROBE}));
		t.start(10.0); t.timeout; 
		
		log("Entering 'Flash'-Mode");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {FLASH}));
		t.start(10.0); t.timeout; 
		
		log("Entering 'Fade'-Mode");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {FADE}));
		t.start(10.0); t.timeout; 
		
		log("Entering 'Smooth'-Mode");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {SMOOTH}));
		t.start(10.0); t.timeout;
		
		log("Set the LED strip back to white");
		serialPort.send(m_sendSerial(SubDevice1, IR01, SET, {COLOUR, 16}));
		t.start(1.5); t.timeout;
		
		log("Turn off LED Strip");
		serialPort.send(m_sendSerial(SubDevice1, IR01, STOP, {}));

		log("Disconnect from Port");
		unmap (mtc:serialPort, system:serialPort);

		setverdict(pass, "LED Strip is functioning as planned");
	}


//	------------------------------- simple recieve test cases --------------------------------
	testcase Recieve() runs on Test system Test{
		timer t;
		var RGB rgb;
		log("Connect to Port");
		map (mtc:serialPort, system:serialPort) param (Connection);
	
		
		t.start(8.0);
		alt {
			[]serialPort.receive {
				setverdict(pass);
			}
			
			[]serialPort.receive(RGB:{?, ?, ?, ?, ?, ?, ?, ?, ?, ?}) -> value rgb {
				log("Color detected ", rgb);
				setverdict(pass);
			}
			[]t.timeout {
				setverdict(inconc);
			}
		}


		log("Disconnect from Port");
		unmap (mtc:serialPort, system:serialPort);

		setverdict(pass, "Recieve is functioning as planned");
	}
	
	
//	-------------------------------------- functions ------------------------------------------ 

 
} with {
	encode "Serial"
}
