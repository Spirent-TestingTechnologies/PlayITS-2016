/*
 * ----------------------------------------------------------------------------
 *  (C) Copyright Testing Technologies 2015-2016.  All Rights Reserved.
 *
 *  All copies of this program, whether in whole or in part, and whether
 *  modified or not, must display this and all other embedded copyright
 *  and ownership notices in full.
 *
 *  See the file COPYRIGHT for details of redistribution and use.
 *
 *  You should have received a copy of the COPYRIGHT file along with
 *  this file; if not, write to the Testing Technologies,
 *  Michaelkirchstrasse 17/18 10179 Berlin, Germany
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 * ----------------------------------------------------------------------------
 */
//** @desc Testing Lightsensor data
module Lights {
	import from PhyIOAUX all;

	import from Header all;
	
	//** @desc Testcase to check wether Headlights are on or not
	testcase HeadLightsOn() runs on me system SUT{
		map(self:config, system:config) param (DeviceID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_1);
		
		var default alts := activate(alt_default());
		
		lightSensor.send(ReadBrightness:{});
		t.start(5.0);
		alt{
			[]lightSensor.receive(State: {(0..BRIGHTNESS_THRESHOLD), ?}){
				log("LED aus.");
				setverdict(fail);
			}
			[]lightSensor.receive(State: {?, ?}) {
				log("LED an.");
				setverdict(pass);
			}
		}
	}

	//** @desc Testcase to check wether Headlights are off or not
	testcase HeadLightsOff() runs on me system SUT{
		map(self:config, system:config) param (DeviceID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_1);
			
		var default alts := activate(alt_default());
			
		lightSensor.send(ReadBrightness:{});
		t.start(5.0);
		alt{
			[]lightSensor.receive(State: {(0..BRIGHTNESS_THRESHOLD), ?}){
				log("LED aus.");
				setverdict(pass);
			}
			[]lightSensor.receive(State: {?, ?}) {
				log("LED an.");
				setverdict(fail);
			}
		}
	}
	
	/** @desc Testet Warnblinker
	* Reads Timestamps of LED status change and compares it to predefined values
	*/   
	testcase EmergencyLights() runs on me system SUT{
		map(self:config, system:config) param (DeviceID_1);
		map(self:lightSensor, system:lightSensor) param (DeviceID_1, SensorID_1);
		
		setverdict(f_checkEmergencyLights(SWITCH_TIME_TARGET,ALLOWED_SWITCH_TIME_DEVIATION, 5, 10.0));
	}
	
	function executeLightsTestcases() {
		execute(HeadLightsOn());
		execute(HeadLightsOff());
		
		execute(EmergencyLights());
	}
}
