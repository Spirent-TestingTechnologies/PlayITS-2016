/**
 * @shortdesc Theft Detection
 * @desc Testcase that tests the theft detection
 * @relexecpath clf/TestSuite.clf
 */
module TheftDetection {
	import from PhyIOAUX all;
	import from TTlibrary_UnitTest all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;
	
	/*
	 * General Concept:
	 * The procedure is inspired by the way you get into a car-sharing vehicle. First you have to show your RFID,
	 * then you can open the door. In this case scenario there is only one correct RFID. If the door is opened
	 * with no or a false RFID provided, then the alarm goes off.
	 */
	
	/**
	 * @shortdesc Theft Detection (correct RFID, door opens)
	 * @desc Theft detection with the correct RFID and door opening. Expect no alarm.
	 * @verdict pass if RFID is correct, door opens and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidOk_DoorOpens() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(pass, true, false);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc Theft Detection (correct RFID, door remains closed)
	 * @desc Theft detection with the correct RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is correct, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidOk_DoorClosed() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(pass, false, false);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc Theft Detection (false RFID, door opens)
	 * @desc Theft detection with a false RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is false, door opens and alarm goes off. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read false RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidFalse_DoorOpens() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(fail, true, true);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc Theft Detection (flase RFID, door remains closed)
	 * @desc Theft detection with the false RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is false, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidFalse_DoorClosed() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(fail, false, false);
		setverdict(verdict.verdict, verdict.reason);
	}
		
	/**
	 * @shortdesc Theft Detection (no RFID, door opens)
	 * @desc Theft detection with no RFID and door opening. Expect alarm.
	 * @verdict pass if RFID is missing, door opens and alarm goes off. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidMissing_DoorOpens() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(inconc, true, true);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc Theft Detection (no RFID, door remains closed)
	 * @desc Theft detection with the no RFID and door doesn't open. Expect no alarm.
	 * @verdict pass if RFID is missing, door doesn't open and no alarm. inconc if light sensor doesn't inform about
	 * 			the alarm. Otherwise fail
	 * @stage 1:Read correct RFID
	 * @stage 2:Wait for door
	 * @stage 3:Check for alarm
	 */
	testcase TheftDetectionTestcase_RfidMissing_DoorClosed() runs on me system System {
		var VerdictDescription verdict := internalTheftDetection(inconc, false, false);
		setverdict(verdict.verdict, verdict.reason);
	}
	/**
	 *
	 * @desc Checks states of RFID and Door and if necessary the Emergency Lights.
	 * @param expectRFID
	 * @param expectDoor
	 * @param expectEmergency
	 * @return Verdict and reason of the present configuration
	 */
	function internalTheftDetection(verdicttype expectRFID, boolean expectDoor, boolean expectEmergency)
	runs on me system System return VerdictDescription {
		var default alts := activate(alt_default());
		var VerdictDescription result := {none};
		timer requestELTimer;
		
		var boolean hasDoor := false;
		var boolean hasRFID := false;
		var boolean isRFIDCorrect := false;
		var boolean isAlarmOn := false;
		var boolean run := true;
		
		setup();
		
		if(SIMULATION) {
			// simulator needs infos to determine behaviour
			sutConfig.send(TestcaseInfo: "Theft Detection");
			
			if(expectRFID == pass) {
				sutConfig.send(TestcaseInfo: "Correct RFID");
			} else if(expectRFID == fail) {
				sutConfig.send(TestcaseInfo: "False RFID");
			} else {
				sutConfig.send(TestcaseInfo: "No RFID");
			}
			
			if(expectDoor) {
				sutConfig.send(TestcaseInfo: "Open Door");
			} else {
				sutConfig.send(TestcaseInfo: "No Door");
			}
		}
		
		theftDetection.send(TheftStart: OWNER_RFID);
		lightSensor.send(ReadFrequencyStart: MIN_SWITCH_BRIGHTNESS_DIFFERENCE);
		
		t.start(TIME_THEFT_DETECTION);
		requestELTimer.start(EL_CHECK_TIME);
		
		if(expectRFID != inconc) {
			setStage(1, TIME_THEFT_DETECTION);
		} else if(expectDoor) {
			setStage(2, TIME_THEFT_DETECTION);
			
		} else if(not expectDoor) {
			setStage(3, WAIT_FOR_EL_TIME);
		}
		
		while(result.verdict == none and run) {
			alt {
				[not hasDoor]doorSensor.receive(DoorState: true) {
					log("Door opened.");
					setStage(3, WAIT_FOR_EL_TIME);
					
					hasDoor := true;
					
					t.start(WAIT_FOR_EL_TIME);
				}
				[]doorSensor.receive(DoorState: ?) {
				// there is nothing to see here, please continue
				}
				[not isAlarmOn]requestELTimer.timeout {
					lightSensor.send(READ_FREQUENCY);
					requestELTimer.start(EL_CHECK_TIME);
				}
				[]lightSensor.receive(Frequency: 0.0) {
				// there is nothing to see here, please continue
				}
				[]lightSensor.receive(Frequency: CORRECT_FREQUENCY) {
					log("Emergency light on, frequency correct.");
					isAlarmOn := true;
					run := false;
				}
				[]rfidSensor.receive(RFIDState: {?, OWNER_RFID}) {
					if(not hasRFID or not isRFIDCorrect) {
						log("Received correct RFID.");
					}
					
					if(not hasRFID) {
						// restart timer here because we want to give extra time to push button
						if(expectDoor) {
							setStage(2, TIME_THEFT_DETECTION);
							t.start(TIME_THEFT_DETECTION);
						} else {
							setStage(3, WAIT_FOR_EL_TIME);
							t.start(WAIT_FOR_EL_TIME);
						}
					}
					
					hasRFID := true;
					isRFIDCorrect := true;
				}
				[]rfidSensor.receive(RFIDState: ?) {
					// false RFID
					if(not hasRFID or isRFIDCorrect) {
						log("Received false RFID.");
					}
					
					if(not hasRFID) {
						// restart timer here because we want to give extra time to push button
						if(expectDoor) {
							setStage(2, TIME_THEFT_DETECTION);
							t.start(TIME_THEFT_DETECTION);
						} else {
							setStage(3, WAIT_FOR_EL_TIME);
							t.start(WAIT_FOR_EL_TIME);
						}
					}
					
					hasRFID := true;
					isRFIDCorrect := false;
				}
				[]t.timeout {
					log("Timeout.");
					run := false;
				}
			}
		}
		
		lightSensor.send(ReadFrequencyStop: {});
		theftDetection.send(TheftStop: {});
		
		// light sensor answers after stop, we need to catch that before disconnecting
		t.start(WAIT_FOR_EL_TIME);
		alt {
			[]lightSensor.receive(Frequency: 0.0) {
			// there is nothing to see here, please continue
			}
			[]lightSensor.receive(Frequency: ?) {
				isAlarmOn := true;
			}
			[]t.timeout {
				// continue
			}
		}
		
		tearDown();
		
		if(not expectEmergency and isAlarmOn) {
			return verdictFail("Alarm shouldn't have gone off");
		} else if(expectEmergency and not isAlarmOn) {
			return verdictFail("Alarm should have gone off");
		} else if(not expectDoor and hasDoor) {
			return verdictFail("Door shouldn't have opened");
		} else if(expectDoor and not hasDoor) {
			return verdictFail("Door should have opened");
		}

		if(expectRFID == inconc) {
			if(hasRFID) {
				return verdictFail("Expected no RFID");
			} else {
				return verdictPass();
			}
		} else {
			if(isRFIDCorrect and expectRFID == fail) {
				return verdictFail("Expected false RFID");
			} else if(not isRFIDCorrect and expectRFID == pass) {
				return verdictFail("Expected correct RFID");
			} else {
				return verdictPass();
			}
		}
	}
	
	function executeTheftDetectionTestcases() {
		execute(TheftDetectionTestcase_RfidOk_DoorOpens());
		execute(TheftDetectionTestcase_RfidOk_DoorClosed());
		execute(TheftDetectionTestcase_RfidFalse_DoorOpens());
		execute(TheftDetectionTestcase_RfidFalse_DoorClosed());
		execute(TheftDetectionTestcase_RfidMissing_DoorOpens());
		execute(TheftDetectionTestcase_RfidMissing_DoorClosed());
	}
}
