module Distance{
	import from PhyIOAUX all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;

	testcase MeasureDistance() runs on me system System {

		var DistanceSensorState state;
		map(self:config, system:config);
		map(self:distanceSensor, system:distanceSensor);

		distanceSensor.send(ReadDistanceStart:{});
		t.start(1.0);
		t.timeout;
		t.start(15.0);
		alt {
			[] distanceSensor.receive(DistanceSensorState:{?,?}) ->
			   value state {
				log("received Sensor state");
				var integer dist := state.distance;
				if (compareDist(dist, EXPECTED_DISTANCE_10)) {
					log("measured distance in threshold");
					setverdict(pass);
				}
				if (compareDist(dist, EXPECTED_DISTANCE_20)) {
					log("measured distance in threshold");
					setverdict(pass);
				} else {
					log("unexpected distance");
					repeat;
				}
			}
			[] t.timeout {
				log("received no data");
				setverdict(fail);
			}
		}
	}
	testcase VariousDistanceTestcase() runs on me system System{
		template DistancesToCheck distlist := {};
		
		 
		
	}
	type record of integer DistancesToCheck;

	function continuedDistanceCheck(DistancesToCheck list) runs on me system System return verdicttype{
		var verdicttype temp_V := none;
		var DistanceSensorState state;
		var integer i := 0;
		
		setup();
		
		distanceSensor.send(ReadDistanceStart:{});
		t.start(1.0);
		t.timeout;
		while(i < lengthof(list)){

			t.start(2.0);
    		alt{
    			[]t.timeout{
    				temp_V := fail;
    				return temp_V;
    				break;
    			}
    			[]distanceSensor.receive(DistanceSensorState:{?,?}) -> value state{
    				if(not compareDist(state.distance, list[i])){
    					repeat;
    				}
    				else{
    					t.start(2.0);
    					i := i +1;
    					repeat;
    				}
    			}
    		}    	
    	}
    	temp_V := pass;
    	return temp_V;
 	}
	
	function executeDistanceTestcases() {
		// TODO fill me
	}
}