//** @desc Testing Door Status
module CodecTests language "TTCN-3:2010 Advanced Parameterization" {
	import from PhyIOAUX all;
	
	import from Components all;
	
	type record of boolean RecordList;
	
	type anytype TT  with {encode "PhyIO"};
	
	type record CodecPair {TT v, charstring s, charstring d}
	
	type record of CodecPair CodecPairList;
	
	const CodecPairList ENCODE_LIST := {
		// LED
		{{SwitchLED := true},				"30, 1, 1",					"LED on"},
		{{SwitchLED := false},				"30, 1, 0",					"LED off"},
		{{BlinkLEDStart := 0.4},			"30, 5, 0.4",				"LED blink start"},
		{{BlinkLEDStop := {}},				"30, 3",					"LED blink stop"},
		
		// RFID
		{{ReadRFIDStart := {}},				"80, 2",					"RFID start"},
		{{ReadRFIDStop := {}},				"80, 3",					"RFID stop"},
		{{RFID := {255, 0, 2, 156}},		"80, 1, 255, 0, 2, 156",	"RFID setup"},
		
		// Door
		{{ReadDoorStart := {}},				"60, 2",					"Door start"},
		{{ReadDoorStop := {}},				"60, 3",					"Door stop"},
		
		// Distance Sensor
		{{DistanceSensorSetup := 0.1},		"21, 1, 0.1",				"Distance setup"},
		{{ReadDistanceStart := {}},			"21, 2",					"Distance start"},
		{{ReadDistanceStop := {}},			"21, 3",					"Distance stop"},
		
		// Light Sensor
		{{ReadFrequencyStart := 8},			"70, 2, 8",					"Frequency start"},
		{{ReadFrequencyStop := {}},			"70, 3",					"Frequency stop"},
		// ReadLightSwitchStart/Stop is not used anymore -> no tests
		{{ReadLightSensorState := false},	"70, 4, 0",					"Read light sensor"},
		{{ReadLightSensorState := true},	"70, 4, 1",					"Read frequency"},
		
		// Theft Detection
		{{TheftStart := {255, 0, 2, 156}},	"85, 2, 255, 0, 2, 156",	"Start theft detection"},
		{{TheftStop := {}},					"85, 3",					"Stop theft detection"}
	};
	
	testcase EncodingTestcase() runs on me system me {
		var RecordList verdicts;
		
		for(var integer i := 0; i < lengthof(ENCODE_LIST); i := i  + 1) {
			if(checkEncode(ENCODE_LIST[i])) {
			// TODO log
			} else {
				setverdict(fail, "Fail at:", ENCODE_LIST[i].d);
			}
		}
		
		// sadly impossible to put these into a list
		if(not checkDecode<RFID>(RFID: {255, 0, 2, 156},						"80, 101, 255, 0, 2, 156")) {
			setverdict(fail, "Fail at: RFID answer");
		}
		
		if(not checkDecode<DoorState>(DoorState: true,							"60, 101, 1")) {
			setverdict(fail, "Fail at: Door answer");
		}
		
		if(not checkDecode<DistanceSensorState>(DistanceSensorState: {3, 1002},	"21, 101, 3, 1002")) {
			setverdict(fail, "Fail at: Distance answer");
		}
				
		if(not checkDecode<State>(State: {37, 1002},							"70, 101, 37, 1002")) {
			setverdict(fail, "Fail at: Brightness answer");
		}
				
		if(not checkDecode<Frequency>(Frequency: 3.25,							"70, 101, 3.25")) {
			setverdict(fail, "Fail at: Frequency answer");
		}

		if(getverdict == none) {
			setverdict(pass);
		}
	}
	
	function checkEncode(CodecPair p) return boolean {
		var bitstring b := encvalue(p.v);
	
		var charstring str := oct2char(bit2oct(b));
		
		return str == p.s;
	}
	
	function checkDecode<T>(T v, charstring s) return boolean {
		var T expected := v;
		
		var bitstring bt := oct2bit(char2oct(s));
		var integer r := decvalue(bt, v);
		
		return r == 0 and expected == v;
	}
}