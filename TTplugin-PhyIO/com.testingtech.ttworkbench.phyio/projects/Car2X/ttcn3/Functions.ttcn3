module Functions {
	import from PhyIOAUX all;
	import from Components all;
	
	/**
	 * @desc Test to check for valid rfid
	 * @param RFID in question, time until timeout
	 */
	function f_checkRFID(RFID rfid, float time) runs on me system SUT return verdicttype {
			
		rfidSensor.send(ReadRFID:{});
		
		t.start(time);
		
		alt{
			[]rfidSensor.receive(RFID: rfid){
				return pass;
			}
			[]rfidSensor.receive(RFID: ?) {
				return fail;
			}
			[]t.timeout {
				return inconc;
			}
		}
		
		return inconc;
	}
	/** @desc checks if EmergencyLights are working correctly
	 *  @param 	switchTimetarget: time to next status change
	 *  		allowedSwitchTimeDeviation: allowed delay between status changes
	 *  		time: time until timeout
	 */
	function f_checkEmergencyLights(float switchTimeTarget, float allowedSwitchTimeDeviation, integer minSwitches, float time)
	runs on me system SUT return verdicttype{
		var verdicttype result := none;
		
		var State state;
		var float lastTimestamp := null;
		var float thisTimestamp := null;
		var boolean isTimeout;
		var integer switchCount := 0;
		
		lightSensor.send(ReadLightSwitchStart:{});
		
		t.start(time);

		while(result == none){
			alt{
				[]lightSensor.receive(State: {?, ?}) -> value state {
					switchCount := switchCount + 1;
					
					thisTimestamp := int2float(state.time) / 1000.0;
					
					if(lastTimestamp == null){
						lastTimestamp := thisTimestamp;
					} else {
						if(f_abs(thisTimestamp - lastTimestamp - switchTimeTarget) > allowedSwitchTimeDeviation){
							result := fail;
						} else {
							lastTimestamp := thisTimestamp;
						}
					}
				}
				[]t.timeout {
					isTimeout := true;
					result := inconc;
				}
			}
		}
		
		if(result != none){
			lightSensor.send(ReadLightSwitchStop:{});
			return result;
		}
		
		lightSensor.receive(State: {?, ?}) -> value state;
		thisTimestamp := int2float(state.time) / 1000.0;
		
		lightSensor.send(ReadLightSwitchStop:{});
			
		if(thisTimestamp - lastTimestamp <= switchTimeTarget + allowedSwitchTimeDeviation
			and switchCount >= minSwitches){
			return pass;
		}
		else{
			return fail;
		}
		
	}
	
	function f_abs(float a) return float{
		if(a < 0.0){return -a;}
		else{return a;}
	}
}