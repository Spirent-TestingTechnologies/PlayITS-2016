/*
 * ----------------------------------------------------------------------------
 *  (C) Copyright Testing Technologies 2015-2016.  All Rights Reserved.
 *
 *  All copies of this program, whether in whole or in part, and whether
 *  modified or not, must display this and all other embedded copyright
 *  and ownership notices in full.
 *
 *  See the file COPYRIGHT for details of redistribution and use.
 *
 *  You should have received a copy of the COPYRIGHT file along with
 *  this file; if not, write to the Testing Technologies,
 *  Michaelkirchstrasse 17/18 10179 Berlin, Germany
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 * ----------------------------------------------------------------------------
 */

module Lights {

	import from Header all;
	
	const integer RED := 0;
	const integer YELLOW := 1;
	const integer A := 0;
	const integer B := 1;
	
	const float LED_REFRESH_RATE := 1.0; // seconds
	const float RGB_REFRESH_RATE := 1.0; // seconds
	
	modulepar Brightness BRIGHTNESS_THRESHOLD := 512;
	
	testcase HeadLightsOn() runs on me system SUT{
		map(self:lightSensor, system:lightSensor);
		
		var default alts := activate(alt_default());
		
		lightSensor.send(ReadBrightness:{});
		t.start(5.0);
		alt{
			[]lightSensor.receive(Brightness: (0..BRIGHTNESS_THRESHOLD)){
				log("LED aus.");
				setverdict(fail);
			}
			[]lightSensor.receive(Brightness: *) {
				log("LED an.");
				setverdict(pass);
			}
		}
	}

	testcase HeadLightsOff() runs on me system SUT{
			map(self:lightSensor, system:lightSensor);
			
			var default alts := activate(alt_default());
			
			lightSensor.send(ReadBrightness:{});
			t.start(5.0);
			alt{
				[]lightSensor.receive(Brightness: (0..BRIGHTNESS_THRESHOLD)){
					log("LED aus.");
					setverdict(pass);
				}
				[]lightSensor.receive(Brightness: *) {
					log("LED an.");
					setverdict(fail);
				}
			}
		}
	//** @desc Testet Warnblinker
	//  Sollwert ms von Abständen Zustandsänderung
	//  +- 100ms Abweichung
	//  bei receive compare zeit jetzt und von letztemal
	 	
	testcase EmergencyLights() runs on me system SUT{
		timer intervall;
		
		map(self:lightSensor, system:lightSensor);
		
		var default alts := activate(alt_default());
		
		lightSensor.send(ReadTimeStamp:{});
		t.start(10.0);
		while(getverdict == none){
			alt{
				//Statewechsel timestampvergleich
				[]lightSensor.receive{/*TODO finish this*/}
			}
		}
	}
}
