module Distance{
	import from PhyIOAUX all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;

	//** @desc testcase how a continous stream of distance values compare to one specific value
	testcase MeasureDistanceTestcase() runs on me system System {
		template DistancesToCheck elem := {};
		setverdict(continuedDistanceCheck(elem));
	}
	//** @desc testcase to see wether a continous stream of distance values lie in a specified range of expected distances
	testcase VariousDistanceTestcase() runs on me system System{
		template DistancesToCheck distlist := {};
		
		setverdict(continuedDistanceCheck(distlist));
			
	}
	
	type record of integer DistancesToCheck;

	/**
		 * @desc 
		 * @param list of expected distances
		 * @return verdict
		 * @verdict to pass every incoming value has to lie in a specified set of expected distances.
		 * 			
		 */
	function continuedDistanceCheck(DistancesToCheck list) runs on me system System return verdicttype{
		var verdicttype temp_V := none;
		var DistanceSensorState state;
		var integer i := 0;
		
		setup();
		
		distanceSensor.send(ReadDistanceStart:{});
		t.start(1.0);
		t.timeout;
		while(i < lengthof(list)){

			t.start(t_dist);
    		alt{
    			[]t.timeout{
    				temp_V := fail;
    				break;
    			}
    			[]distanceSensor.receive(DistanceSensorState:{?,?}) -> value state{
    				if(compareDist(state.distance, list[i])){
						t.start(t_dist);
						i := i +1;
    				}
    				
    			}
    		}    	
    	}
    	if(temp_V == none){
    		temp_V := pass;
    	}
		distanceSensor.send(ReadDistanceStop:{});
    	tearDown();
    	return temp_V;
 	}
	
	function executeDistanceTestcases() {
		// TODO fill me
	}
}