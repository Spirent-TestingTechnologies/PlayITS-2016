/**
 * @shortdesc Distance 
 * @desc Testcases that test the distance sensor
 * @relexecpath clf/Testsuite.clf
 */
module Distance {
	import from PhyIOAUX all;
	import from TTlibrary_UnitTest all;
	
	import from Components all;
	import from Functions all;
	import from Parameters all;

	/**
	 * @shortdesc Single Distance
	 * @desc Move object a certain distance in front of the sensor and measure it
	 * @verdict pass if the distance sensor yields the expected distance else fail
	 * @stage 1: Distance: 10cm
	 */
	testcase SingleDistanceTestcase() runs on me system System {
		var VerdictDescription verdict := internalDistancesTestcase(SINGLE_DISTANCE);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @shortdesc Various Distances
	 * @desc Move object a certain distance in front of the sensor and measure it. Repeat this for a number of values.
	 * @verdict pass if the distance sensor yields the expected distances else fail
	 * @stage 1: Distance: 30cm
	 * @stage 2: Distance: 10cm
	 * @stage 3: Distance: 20cm
	 * @stage 4: Distance: 50cm
	 */
	testcase VariousDistancesTestcase() runs on me system System {
		// these values are hardcoded because UI can't handle parameters that are changend on runtime
		// the number of elements in the list would affect the number of stages
		var DistancesToCheck variousDistances := {30, 10, 20, 50};
		var VerdictDescription verdict := internalDistancesTestcase(variousDistances);
		setverdict(verdict.verdict, verdict.reason);
	}
	
	/**
	 * @desc turns on the distance sensor. Then receives a series of measurements which it tries to match to the first
	 * 		 element of the list. If this succeeds before the timeout, the function moves on the next list element
	 * 		 until all distances matched or a timeout happens.
	 * @param list list of expected distances
	 * @return verdict
	 * @verdict pass if all distances match before timeout, fail otherwise.
	 */
	function internalDistancesTestcase(DistancesToCheck list) runs on me system System return VerdictDescription {
		var default alts := activate(alt_default());
		var VerdictDescription result := {none} ;
		var DistanceSensorState state;
		var integer i := 0;
		var boolean hasReceivedData := false;
		
		setup();
		
		if(SIMULATION) {
			sutConfig.send(TestcaseInfo: "Distance Sweep On");
		}
		
		distanceSensor.send(ReadDistanceStart:{});
		
		t.start(TIME_DISTANCE_SINGLE_MEASUREMENT);
		
		setStage(1, TIME_DISTANCE_SINGLE_MEASUREMENT);
		
		while(i < lengthof(list) and result.verdict == none) {
			
			alt {
				[]distanceSensor.receive(DistanceSensorState:{?,?}) -> value state {
					if(compareDist(state.distance, list[i])) {
						log("Success at " & int2str(list[i]) & "cm");
						
						if(i < lengthof(list) - 1) {
							setStage(i + 1, TIME_DISTANCE_SINGLE_MEASUREMENT);
							t.start(TIME_DISTANCE_SINGLE_MEASUREMENT);
						}
						
						i := i + 1;
					}
					// else continue with same index since the we're not in the desired range
					
					hasReceivedData := true;
				}
				[]t.timeout {
					if(not hasReceivedData) {
						result := verdictInconc("No data from sensor");
					} else {
						result := verdictFail("Failed to match distance within given time span");
					}
				}
			}
		}
		
		if(result.verdict == none) {
			result := verdictPass("");
		}
		
		distanceSensor.send(ReadDistanceStop:{});
		
		tearDown();
		
		return result;
	}
	
	function executeDistanceTestcases() {
		execute(SingleDistanceTestcase());
		execute(VariousDistancesTestcase());
	}
}
